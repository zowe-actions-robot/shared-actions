name: "Create docker manifest"
description: "This action helps to create and publish docker manifest."
inputs:
  linux-distro:
    description: "Current Linux distro name."
    required: false
    default: "ubuntu"
  primary-linux-distro:
    description: "Primary Linux distro name. 'latest' will be tagged same as 'latest-<primary-linux-distro>'."
    required: false
    default: "ubuntu"
  cpu-arch-list:
    description: "CPU architecture name list seperated by space."
    required: false
    default: "amd64 s390x"
  snapshot-manifests:
    description: "If we want to create extra snapshot manifests when it's a formal release. Use {major}, {minor}, {patch}, {version}, {distro} and {branch} special variables for special manifest based on current version."
    required: false
    default: "{version}-{distro}.{branch}"
  release-manifests:
    description: "If we want to create extra release manifests when it's a formal release. Use {major}, {minor}, {patch}, {version}, {distro} and {branch} special variables for special manifest based on current version."
    required: false
    default: "latest-{distro} {major}-{distro} {major}.{minor}-{distro}"
  primary-release-manifests:
    description: "If we want to create extra primary release manifests when it's a formal release and 'linux-distro' is 'primary-linux-distro'. Use {major}, {minor}, {patch}, {version}, {distro} and {branch} special variables for special manifest based on current version."
    required: false
    default: "latest {major} {major}.{minor} {major}.{minor}.{patch}"
  release-latest-tag:
    description: "Whether should update `latest` or `latest-{distro}` tags. Set to true, false or auto."
    required: false
    default: "auto"

runs:
  using: "composite"
  steps:
    - name: Define extra manifests
      run: |
        release_latest_tag="${{ inputs.release-latest-tag }}"
        if [ "${release_latest_tag}" = "auto" ]; then
          # by default, do not update `latest` tag
          release_latest_tag=false
          # except that
          case "${{ env.IMAGE_NAME }}" in
            base|base-jdk|base-node|zowe-launch-scripts|api-catalog-services|caching-service|discovery-service|gateway-service|metrics-service|files-api|jobs-api|explorer-jes|explorer-mvs|explorer-uss|app-server|explorer-ip|zaas-service)
              if [ "${{ env.IMAGE_VERSION_MAJOR }}" = "3" ]; then
                release_latest_tag=true
              fi
              ;;
          esac
        fi
        echo "Release latest tags? ${release_latest_tag}"

        manifests=
        if [ "${{ inputs.snapshot-manifests }}" != "" -a "${{ env.IMAGE_RELEASE }}" != "true" ]; then
          for manifest in ${{ inputs.snapshot-manifests }}
          do
            if [[ "${manifest}" = "latest" || "${manifest}" == latest-* ]]; then
              if [ "${release_latest_tag}" = "true" ]; then
                manifests="${manifests} ${manifest}"
              fi
            else
              manifests="${manifests} ${manifest}"
            fi
          done
        fi
        if [ "${{ inputs.release-manifests }}" != "" -a "${{ env.IMAGE_RELEASE }}" = "true" ]; then
          for manifest in ${{ inputs.release-manifests }}
          do
            if [[ "${manifest}" = "latest" || "${manifest}" == latest-* ]]; then
              if [ "${release_latest_tag}" = "true" ]; then
                manifests="${manifests} ${manifest}"
              fi
            else
              manifests="${manifests} ${manifest}"
            fi
          done
        fi
        if [ "${{ inputs.primary-release-manifests }}" != "" -a "${{ env.IMAGE_RELEASE }}" = "true" -a "${{ inputs.linux-distro }}" = "${{ inputs.primary-linux-distro}}" ]; then
          for manifest in ${{ inputs.primary-release-manifests }}
          do
            if [[ "${manifest}" = "latest" || "${manifest}" == latest-* ]]; then
              if [ "${release_latest_tag}" = "true" ]; then
                manifests="${manifests} ${manifest}"
              fi
            else
              manifests="${manifests} ${manifest}"
            fi
          done
        fi
        manifests=$(echo "${manifests}" | sed -e "s/{major}/${{ env.IMAGE_VERSION_MAJOR }}/g" -e "s/{minor}/${{ env.IMAGE_VERSION_MINOR }}/g" -e "s/{patch}/${{ env.IMAGE_VERSION_PATCH }}/g" -e "s/{version}/${{ env.IMAGE_VERSION }}/" -e "s/{distro}/${{ inputs.linux-distro }}/g" -e "s/{branch}/${{ env.BRANCH_NAME }}/g")

        extras=
        for manifest in ${manifests}
        do
          echo "************ extra manifest: ${manifest}"
          extras="${extras} ${{ env.ZOWE_DOCKER_REGISTRY }}/${{ env.DEFAULT_ZOWE_IMAGE_PREFIX }}${{ env.IMAGE_NAME }}:${manifest}"
        done
        echo "IMAGE_MANIFEST_EXTRAS=${extras}" >> $GITHUB_ENV
      shell: bash

    - name: Create and publish manifests
      run: |
        export DOCKER_CLI_EXPERIMENTAL=enabled
        amends=
        for arch in ${{ inputs.cpu-arch-list }}
        do
          amend=$(echo "${IMAGE_MANIFEST_AMEND}" | sed -e "s/{ARCH}/${arch}/")
          echo "************ adding amend ${amend}"
          amends="${amends} --amend ${amend}"
        done
        IMAGE_MANIFEST="${{ env.IMAGE_MANIFEST }} ${{ env.IMAGE_MANIFEST_EXTRAS }}"
        echo "************ final manifests: ${IMAGE_MANIFEST}"
        for manifest in ${IMAGE_MANIFEST}
        do
          echo "************ creating ${manifest}"
          docker manifest create ${manifest} ${amends}
          docker manifest push ${manifest}
        done
      shell: bash
