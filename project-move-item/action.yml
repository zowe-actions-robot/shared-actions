name: 'Move Project Item'
description: 'Update status of issue or pull request in GitHub v2 project'
inputs:
  assign-author:
    description: 'Assign author to pull request if they are on team'
    required: false
    default: 'false'
  issue-url:
    description: 'GitHub issue URL (required only if event payload is missing)'
    required: false
  item-status:
    description: 'Column name (Status) to assign to item'
    required: true
  project-number:
    description: 'GitHub project number'
    required: true
  project-owner:
    description: 'Organization that owns GitHub project'
    required: false
    default: 'zowe'
  project-token:
    description: 'GitHub token with access to read/write projects'
    required: true
outputs:
  itemId:
    description: 'Item ID of GitHub project card'
    value: ${{ steps.add-to-project.outputs.itemId }}

runs:
  using: 'composite'
  steps:
    - run: |
        response=$(gh project item-add ${{ inputs.project-number }} --format json --owner ${{ inputs.project-owner }} --url ${{ inputs.issue-url || github.event.issue.html_url || github.event.pull_request.html_url }})
        echo "itemId=$(echo $response | jq -r '.id')" >> "$GITHUB_OUTPUT"
      env:
        GITHUB_TOKEN: ${{ inputs.project-token }}
      id: add-to-project
      shell: bash

    - run: |
        response=$(gh issue view ${{ github.event.issue.number }} --repo ${{ github.repository }} --json projectItems)
        echo "statusName=$(echo $response | jq -r '.projectItems[] | .status.name')" >> "$GITHUB_OUTPUT"
      env:
        GITHUB_TOKEN: ${{ inputs.project-token }}
      id: get-issue-status
      if: ${{ github.event.issue }}
      shell: bash

    - run: |
        response=$(gh project field-list ${{ inputs.project-number }} --format json --owner ${{ inputs.project-owner }})
        echo "statusNames=$(echo $response | jq -r '.fields[] | select(.name == "Status") | [.options[].name] | join(",")')" >> "$GITHUB_OUTPUT"
      env:
        GITHUB_TOKEN: ${{ inputs.project-token }}
      id: get-project-fields
      if: ${{ github.event.issue && steps.get-issue-status.outputs.statusName }}
      shell: bash

    - run: |
        status_names = "${{ steps.get-project-fields.outputs.statusNames }}".split(",")
        old_status_idx = status_names.index("${{ steps.get-issue-status.outputs.statusName }}")
        new_status_idx = status_names.index("${{ inputs.item-status }}")
        cmp = lambda a, b: (a > b) - (a < b)
        with open("${{ env.GITHUB_OUTPUT }}", 'a') as f:
          f.write("compareResult=" + str(cmp(old_status_idx, new_status_idx)) + "\n")
      id: compare-status-names
      if: ${{ github.event.issue && steps.get-project-fields.outputs.statusNames }}
      shell: python

    - uses: titoportas/update-project-fields@v0.1.0
      if: ${{ steps.compare-status-names.outputs.compareResult != '1' }}
      with:
        project-url: https://github.com/orgs/${{ inputs.project-owner }}/projects/${{ inputs.project-number }}
        github-token: ${{ inputs.project-token }}
        item-id: ${{ steps.add-to-project.outputs.itemId }}
        field-keys: Status
        field-values: ${{ inputs.item-status }}

    - run: |
        response=$(curl -fs -H "Authorization: Token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.event.pull_request.user.login }}/permission)
        echo "hasWrite=$(echo $response | jq -r '.user.permissions.push')" >> "$GITHUB_OUTPUT"
      env:
        GITHUB_TOKEN: ${{ github.token }}
      id: check-author-permissions
      if: ${{ inputs.assign-author == 'true' && github.event.pull_request && toJSON(github.event.pull_request.assignees) == '[]' && github.event.pull_request.user.type != 'Bot' }}
      shell: bash

    - run: gh pr edit ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --add-assignee ${{ github.event.pull_request.user.login }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      if: ${{ steps.check-author-permissions.outputs.hasWrite == 'true' }}
      shell: bash
